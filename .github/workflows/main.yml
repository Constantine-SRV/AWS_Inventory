name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      command:
        description: 'Build command'
        required: true
        default: 'build-windows'
        type: choice
        options:
          - build-windows
          - build-linux

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            ext: ""
            command: build-linux
          - os: windows-latest
            rid: win-x64
            ext: ".exe"
            command: build-windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Restore dependencies
        if: ${{ matrix.command == github.event.inputs.command }}
        run: dotnet restore

      - name: Build project
        if: ${{ matrix.command == github.event.inputs.command }}
        run: dotnet publish --self-contained -r ${{ matrix.rid }} -p:PublishSingleFile=true -c Release -o ./publish${{ matrix.ext }}

      - name: Create Tag and Release
        if: ${{ matrix.command == github.event.inputs.command }}
        uses: actions/github-script@v4
        id: create_tag_and_release
        with:
          script: |
            const tagName = `${{ matrix.command }}-${new Date().toISOString().replace(/[:\-T.]/g, '').slice(0, 14)}`;
            const createTagResponse = await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });

            const createReleaseResponse = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              draft: false,
              prerelease: false
            });

            return createReleaseResponse.data.upload_url;
          env:
            GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: ${{ matrix.command == github.event.inputs.command }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_tag_and_release.outputs.result }}
          asset_path: ./publish${{ matrix.ext }}/aws-inventory${{ matrix.ext }}
          asset_name: aws-inventory${{ matrix.ext }}
          asset_content_type: application/octet-stream
